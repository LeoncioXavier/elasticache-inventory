name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Clear pip cache
      run: pip cache purge

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install pip-audit bandit flake8-bugbear

    - name: Lint with flake8 and flake8-bugbear
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 elasticache_scanner/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Check all files with relaxed settings for warnings and bugbear security checks
        flake8 elasticache_scanner/ --count --max-complexity=12 --max-line-length=120 --statistics --extend-select=B
    - name: Security scan with pip-audit
      run: pip-audit --skip-editable --ignore-vuln GHSA-4xh5-x5gv-qwph

    - name: Security scan with bandit
      run: bandit -r elasticache_scanner/

    - name: Secret scan with truffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.before }}
        head: ${{ github.sha }}
        extra_args: --only-verified

    - name: Type check with mypy
      run: |
        mypy elasticache_scanner/

    - name: Check formatting with black
      run: |
        black --check --line-length 120 elasticache_scanner/ tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only --line-length 120 --profile black elasticache_scanner/ tests/

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=elasticache_scanner --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false